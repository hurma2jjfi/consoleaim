using System;
using System.Diagnostics;
using System.Linq;
using System.Threading.Tasks;
using Memory;

namespace Aimbot
{
    class Program
    {
        static Mem memory = new Mem();

        static async Task Main(string[] args)
        {
            while (true) 
            {
                Console.WriteLine("Press 'Enter' to check if the emulator is running and inject the Aimbot...");
                Console.ReadLine();
                await CheckAndInjectAimbot();

                Console.WriteLine("Do you want to try again? (y/n)");
                string input = Console.ReadLine();
                if (input?.ToLower() != "y")
                {
                    break; 
                }
            }

            Console.WriteLine("Exiting...");
        }

        private static async Task CheckAndInjectAimbot()
        {
            if (Process.GetProcessesByName("HD-Player").Length == 0)
            {
                Console.WriteLine("Please open the emulator.");
                return;
            }

            Int32 proc = Process.GetProcessesByName("HD-Player")[0].Id;
            memory.OpenProcess(proc);

            
            Console.WriteLine("Injecting Aimbot...");

            var result = await memory.AoBScan("FF FF FF FF FF FF FF FF 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? 00 00 00 00 ?? ?? ?? ?? 00 00 00 00 ?? ?? ?? ?? 00 00 00 00 00 00 00 00 00 00 00 00 00 00 A5 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? 00 00 00 00 ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? 00 00 00 ?? ?? ?? ?? 00 00 00 00 ?? ?? ?? ?? ?? ?? ?? ?? 00 00 00 00 ?? ?? ?? ?? 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ?? 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ?? ?? ?? ?? ?? ?? ?? ?? 00 00 00 00 00 00 80 BF 00 00 00 00 00 00 00 00 ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ?? ?? ?? ?? ??", true, true);


            if (result.Any())
            {
                foreach (var currentAddress in result)
                {
                    long enderecoleitura = currentAddress + 0x70;
                    long endercoEscrita = currentAddress + 0x6C;

                    var read = memory.ReadMemory<int>(enderecoleitura.ToString("X"));
                    memory.WriteMemory(endercoEscrita.ToString("X"), "int", read.ToString());
                }

                Console.Beep(400, 300);
                Console.WriteLine("Aimbot injection successful!");
            }
            else
            {
                Console.Beep(240, 300);
                Console.WriteLine("Aimbot injection failed.");
            }
        }
    }
}

